{"ast":null,"code":"import _defineProperty from \"/Users/vn05qe2/Documents/UdemyCourse/React/citas/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/vn05qe2/Documents/UdemyCourse/React/citas/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vn05qe2/Documents/UdemyCourse/React/citas/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, Fragment } from 'react';\n\nfunction Cita({\n  cita,\n  index,\n  eliminarCita\n}) {\n  return React.createElement(\"div\", {\n    className: \"cita\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, \"Mascota: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, cita.mascota)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"Due\\xF1o: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, cita.propietario)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"Fecha: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, cita.fecha)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Hora: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, cita.hora)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Sintomas: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, cita.sintomas)), React.createElement(\"button\", {\n    onClick: () => eliminarCita(index),\n    type: \"button\",\n    className: \"button eliminar u-full-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Eliminar X\"));\n}\n\nfunction Formulario({\n  crearCita\n}) {\n  const stateInicial = {\n    mascota: '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: '' // cita = state actual\n    // actualizarCita = fn para cambiar el state\n\n  };\n\n  const _useState = useState(stateInicial),\n        _useState2 = _slicedToArray(_useState, 2),\n        cita = _useState2[0],\n        actualizarCita = _useState2[1]; // actualiza el state\n\n\n  const actualizarState = e => {\n    actualizarCita(_objectSpread({}, cita, {\n      [e.target.name]: e.target.value\n    }));\n  }; // pasamos la cita al componente principal\n\n\n  const enviarCita = e => {\n    e.preventDefault();\n    console.log(cita); // Pasar la cita hacia el componente principal\n\n    crearCita(cita); // Reiniciar el state (reiniciar el form)\n\n    actualizarCita(stateInicial);\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Crear Cita\"), React.createElement(\"form\", {\n    onSubmit: enviarCita,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Nombre Mascota\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"mascota\",\n    className: \"u-full-width\",\n    placeholder: \"Nombre Mascota\",\n    onChange: actualizarState,\n    value: cita.mascota,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Nombre Due\\xF1o\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"propietario\",\n    className: \"u-full-width\",\n    placeholder: \"Nombre Due\\xF1o de la Mascota\",\n    onChange: actualizarState,\n    value: cita.propietario,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Fecha\"), React.createElement(\"input\", {\n    type: \"date\",\n    className: \"u-full-width\",\n    name: \"fecha\",\n    onChange: actualizarState,\n    value: cita.fecha,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Hora\"), React.createElement(\"input\", {\n    type: \"time\",\n    className: \"u-full-width\",\n    name: \"hora\",\n    onChange: actualizarState,\n    value: cita.hora,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Sintomas\"), React.createElement(\"textarea\", {\n    className: \"u-full-width\",\n    name: \"sintomas\",\n    onChange: actualizarState,\n    value: cita.sintomas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"button-primary u-full-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Agregar\")));\n}\n\nfunction App() {\n  // Cargar las citas de localstorage como state inicial\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n  if (!citasIniciales) {\n    citasIniciales = [];\n  } // useState retorna 2 funciones\n  // El state actual = this.setState;\n  // Función que actualiza el state this.setState();\n\n\n  const _useState3 = useState(citasIniciales),\n        _useState4 = _slicedToArray(_useState3, 2),\n        citas = _useState4[0],\n        guardarCitas = _useState4[1]; // Agregar las nuevas citas al state\n\n\n  const crearCita = cita => {\n    // Tomar una copia del state y agregar el nuevo cliente\n    const nuevasCitas = [...citas, cita]; // Almacenamos en el state\n\n    guardarCitas(nuevasCitas);\n  }; // Elimina las citas del State\n\n\n  const eliminarCita = index => {\n    const nuevasCitas = [...citas];\n    nuevasCitas.splice(index, 1);\n    guardarCitas(nuevasCitas);\n  };\n\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }); // Cargar Condicionalmente un Titulo\n\n  const titulo = Object.keys(citas).length === 0 ? 'No Hay Citas' : 'Administrar Las Citas Aquí';\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Administrador de Pacientes\"), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"one-half column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(Formulario, {\n    crearCita: crearCita,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"one-half column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, titulo), citas.map((cita, index) => React.createElement(Cita, {\n    key: index,\n    index: index,\n    cita: cita,\n    eliminarCita: eliminarCita,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vn05qe2/Documents/UdemyCourse/React/citas/src/App.js"],"names":["React","useState","useEffect","Fragment","Cita","cita","index","eliminarCita","mascota","propietario","fecha","hora","sintomas","Formulario","crearCita","stateInicial","actualizarCita","actualizarState","e","target","name","value","enviarCita","preventDefault","console","log","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","nuevasCitas","splice","setItem","stringify","titulo","Object","keys","length","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, Fragment} from 'react';\n\nfunction Cita({cita, index, eliminarCita}) {\n    return (\n        <div className=\"cita\">\n            <p>Mascota: <span>{cita.mascota}</span></p>\n            <p>Dueño: <span>{cita.propietario}</span></p>\n            <p>Fecha: <span>{cita.fecha}</span></p>\n            <p>Hora: <span>{cita.hora}</span></p>\n            <p>Sintomas: <span>{cita.sintomas}</span></p>\n            <button\n                onClick={() => eliminarCita(index)}\n                type=\"button\" className=\"button eliminar u-full-width\">Eliminar X</button>\n        </div>\n    )\n}\n\nfunction Formulario({crearCita}) {\n\n    const stateInicial = {\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    }\n\n    // cita = state actual\n    // actualizarCita = fn para cambiar el state\n    const [cita, actualizarCita] = useState(stateInicial);\n\n    // actualiza el state\n    const actualizarState = e => {\n        actualizarCita({\n            ...cita,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    // pasamos la cita al componente principal\n    const enviarCita = e => {\n        e.preventDefault();\n\n        console.log(cita);\n\n        // Pasar la cita hacia el componente principal\n        crearCita(cita);\n        // Reiniciar el state (reiniciar el form)\n        actualizarCita(stateInicial)\n    }\n\n\n    return (\n        <Fragment>\n            <h2>Crear Cita</h2>\n\n            <form onSubmit={enviarCita}>\n                <label>Nombre Mascota</label>\n                <input\n                    type=\"text\"\n                    name=\"mascota\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Mascota\"\n                    onChange={actualizarState}\n                    value={cita.mascota}\n                />\n\n                <label>Nombre Dueño</label>\n                <input\n                    type=\"text\"\n                    name=\"propietario\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Dueño de la Mascota\"\n                    onChange={actualizarState}\n                    value={cita.propietario}\n                />\n\n                <label>Fecha</label>\n                <input\n                    type=\"date\"\n                    className=\"u-full-width\"\n                    name=\"fecha\"\n                    onChange={actualizarState}\n                    value={cita.fecha}\n                />\n\n                <label>Hora</label>\n                <input\n                    type=\"time\"\n                    className=\"u-full-width\"\n                    name=\"hora\"\n                    onChange={actualizarState}\n                    value={cita.hora}\n                />\n\n                <label>Sintomas</label>\n                <textarea\n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={actualizarState}\n                    value={cita.sintomas}\n                ></textarea>\n\n                <button type=\"submit\" className=\"button-primary u-full-width\">Agregar</button>\n            </form>\n        </Fragment>\n    )\n}\n\nfunction App() {\n\n    // Cargar las citas de localstorage como state inicial\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if (!citasIniciales){\n        citasIniciales = [];\n    }\n\n    // useState retorna 2 funciones\n    // El state actual = this.setState;\n    // Función que actualiza el state this.setState();\n    const [citas, guardarCitas] = useState(citasIniciales);\n\n    // Agregar las nuevas citas al state\n    const crearCita = cita => {\n        // Tomar una copia del state y agregar el nuevo cliente\n        const nuevasCitas = [...citas, cita]\n        // Almacenamos en el state\n        guardarCitas(nuevasCitas);\n    }\n\n    // Elimina las citas del State\n    const eliminarCita = index => {\n        const nuevasCitas = [...citas];\n        nuevasCitas.splice(index,1);\n        guardarCitas(nuevasCitas);\n    }\n\n    useEffect(\n        () => {\n            let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n            if (citasIniciales){\n                localStorage.setItem('citas', JSON.stringify(citas));\n            } else {\n                localStorage.setItem('citas', JSON.stringify([]));\n            }\n        }\n    )\n\n    // Cargar Condicionalmente un Titulo\n    const titulo = Object.keys(citas).length === 0 ? 'No Hay Citas' : 'Administrar Las Citas Aquí';\n\n    return (\n        <Fragment>\n            <h1>Administrador de Pacientes</h1>\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"one-half column\">\n                        <Formulario\n                            crearCita={crearCita}\n\n                        />\n                    </div>\n                    <div className=\"one-half column\">\n                        <h2>{titulo}</h2>\n                        {\n                            citas.map((cita, index) => (\n                                <Cita\n                                    key={index}\n                                    index={index}\n                                    cita={cita}\n                                    eliminarCita={eliminarCita}\n                                />\n                            ))}\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n\n    )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}